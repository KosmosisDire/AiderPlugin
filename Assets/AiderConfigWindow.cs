using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;
using UnityEngine.UIElements;

public struct AiderRuntimeOptions
{
    public string pythonCmd;
    public string aiderCmd;
    public string aiderArgs;
    public string aiderBridgePath;
}
public class AiderConfigManager : EditorWindow
{
    private AiderRuntimeOptions runtimeOptions;
    private AiderYamlOptions yamlOptions;
    private string[] models;
    private string yamlConfig;
    private Dictionary<string, string> yamlData;
    private string configFilePath =  Path.Combine(Application.dataPath, "../.aider.conf.yml");
    private struct AiderYamlOptions
    {
        public string model;
        public string provider;
        public string apiKey;
        public string setEnv;
        public string file;
        public string read;
        public string reasoningEffort;
        public int? maxChatHistoryTokens;
        public bool? verifySSL;
        public bool? showModelWarnings;
        public bool? cachePrompts;
        public bool? restoreChatHistory;
        public bool? stream;
        public bool? git;
        public bool? autoCommits;
        public bool? dirtyCommits;
        public bool? verbose;
        public bool? suggestShellCommands;

    }

    [MenuItem("Aider/Config")]
    public static void ShowWindow()
    {
        var window = GetWindow<AiderConfigManager>();
        window.titleContent = new GUIContent("Aider Config");

    }

    private void OnEnable()
    {
        runtimeOptions = LoadRuntimeOptions();
        yamlOptions = LoadYamlOptions();
        models = File.ReadAllLines("Assets/Backend/models.txt");
        CreateUI();
    }

    private void CreateUI()
    {
        rootVisualElement.Clear();
        
        var titleLabel = new Label("Aider Config") { style = { unityFontStyleAndWeight = FontStyle.Bold } };
        rootVisualElement.Add(titleLabel);

        AddTextField("Python Command", ref runtimeOptions.pythonCmd, "This should be the base command to run Python on your system (e.g., 'python')");
        AddTextField("Aider Command", ref runtimeOptions.aiderCmd, "This should be the command to run Aider on your system (e.g., 'aider')");
        AddTextField("Aider Arguments", ref runtimeOptions.aiderArgs, "Extra arguments to pass to Aider when running it.");
        AddTextField("Aider Bridge Path", ref runtimeOptions.aiderBridgePath, "Path to the aider-bridge.py file relative to the asset directory.");

        var modelField = new TextField("Model Name") { value = yamlOptions.model };
        var providerField = new TextField("Provider Name") { value = GetProviderName(yamlOptions.model), isReadOnly = true };

        modelField.RegisterValueChangedCallback(evt => { yamlOptions.model= evt.newValue; providerField.value= GetProviderName(evt.newValue); });
        rootVisualElement.Add(modelField);

        if (models.Length > 0)
        {
            var modelDropdown = new PopupField<string>("Common Models", new List<string>(models), 0);
            modelDropdown.RegisterValueChangedCallback(evt => { yamlOptions.model= evt.newValue; modelField.value = evt.newValue;});
            rootVisualElement.Add(modelDropdown);
        }

        rootVisualElement.Add(providerField);

        var apiKeyField = new TextField("API Key") { value = yamlOptions.apiKey};
        apiKeyField.RegisterValueChangedCallback(evt => yamlOptions.apiKey = evt.newValue);
        rootVisualElement.Add(apiKeyField);
        
        var saveButton = new Button(() => SaveConfig()) { text = "Save" };
        rootVisualElement.Add(saveButton);
    }

    private void AddTextField(string label, ref string field, string tooltip)
    {
        var textField = new TextField(label) { value = field, tooltip = tooltip };
        var localField = field;
        textField.RegisterValueChangedCallback(evt => localField = evt.newValue);
        field = localField;
        rootVisualElement.Add(textField);
    }

    private string GetProviderName(string modelName)
    {
        return modelName.Contains('/') ? modelName.Split('/')[0] : "";
    }
    private Dictionary<string, string> parseYamlConfig()
    { 
        string yamlContent = File.ReadAllText(configFilePath);

        Regex regex = new Regex(@"(.+):\s*(.+)");
        Dictionary<string, string> configData = new Dictionary<string, string>();
        
        foreach (Match match in regex.Matches(yamlContent))
        {
            configData.Add(match.Groups[1].Value, match.Groups[2].Value);
        }
        return configData;
    }

    private string createYamlConfig()
    {
        yamlConfig = $"########################################\n" +
                     $"# Auto-Generated by Aider Unity Plugin #\n" +
                     $"########################################\n";
        foreach (KeyValuePair<string, string> option in yamlData)
        {
            yamlConfig += $"{option.Key}: {option.Value}\n";
        }

        return yamlConfig; 
    } 

    private void SaveConfig()
    {
        EditorPrefs.SetString("aider-pythonCmd", runtimeOptions.pythonCmd);
        EditorPrefs.SetString("aider-aiderCmd", runtimeOptions.aiderCmd);
        EditorPrefs.SetString("aider-aiderArgs", runtimeOptions.aiderArgs);
        EditorPrefs.SetString("aider-bridgePath", runtimeOptions.aiderBridgePath);
        if  (yamlOptions.model != "")
        {
        yamlData["model"] = yamlOptions.model;
        }
        if  (yamlOptions.apiKey != "")
        {
        yamlData["api-key"] = $"{GetProviderName(yamlOptions.model)} = {yamlOptions.apiKey}";
        }
        File.WriteAllText(configFilePath, createYamlConfig());

        Close();
    }

    private AiderYamlOptions LoadYamlOptions()
    {
        yamlData = parseYamlConfig(); 
        var yamlConfig = new AiderYamlOptions
        {
            model = yamlData.GetValueOrDefault("model", ""),
            apiKey = !string.IsNullOrEmpty(yamlData.GetValueOrDefault("api-key", "")) && yamlData["api-key"].Contains("=") 
                ? yamlData["api-key"].Split("=")[1].Trim() 
                : yamlData.GetValueOrDefault("api-key", ""),
            provider = GetProviderName(yamlData.GetValueOrDefault("model", "")),
        };

        return yamlConfig;
    }

      public static AiderRuntimeOptions LoadRuntimeOptions()
    {
        var runtimeConfig = new AiderRuntimeOptions
        {
            pythonCmd = EditorPrefs.GetString("aider-pythonCmd"),
            aiderCmd = EditorPrefs.GetString("aider-aiderCmd"),
            aiderArgs = EditorPrefs.GetString("aider-aiderArgs"),
            aiderBridgePath = EditorPrefs.GetString("aider-bridgePath"),
        };

        if (string.IsNullOrEmpty(runtimeConfig.pythonCmd)) runtimeConfig.pythonCmd = "python";
        if (string.IsNullOrEmpty(runtimeConfig.aiderCmd)) runtimeConfig.aiderCmd = "aider";
        if (string.IsNullOrEmpty(runtimeConfig.aiderCmd)) runtimeConfig.aiderBridgePath = "Backend/aider-bridge.py";

        return runtimeConfig;
    }
}